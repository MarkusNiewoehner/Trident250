[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    CG28
    G0 X125 Y125 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro CG28]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}    

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-20} MAXIMUM={s+30}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

# [gcode_macro CLEAN_NOZZLE]
# variable_start_x: 180 #210
# variable_start_y: 250
# variable_start_z: 4.2
# variable_wipe_dist: 50
# variable_wipe_qty: 5
# variable_wipe_spd: 100
# variable_raise_distance: 6
# gcode:
#  {% set temp_extruder = printer['extruder'] %}
#  {% if temp_extruder.temperature < 200 %}
#     M109 S200
#  {% endif %}
#  {% if "xyz" not in printer.toolhead.homed_axes %}
#    CG28
#  {% endif %}
#  #M106 S255
#   STATUS_CLEANING
#  G90                                            ; absolute positioning
#  ## Move nozzle to start position
#  G1 X{start_x} Y{start_y} F30000
#  G1 Z{start_z} F1500

#  ## Wipe nozzle
#  {% for wipes in range(1, (wipe_qty + 1)) %}
#    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
#    G1 X{start_x} F{wipe_spd * 60}
#  {% endfor %}

#  ## Raise nozzle
#  G1 Z{raise_distance}
#  #M107
#   STATUS_READY

[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    SAVE_GCODE_STATE NAME=STATE_Z_TILT
    BED_MESH_CLEAR
    {% if not printer.z_tilt.applied %}
    _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1
    {% endif %}
    _Z_TILT_ADJUST horizontal_move_z=2
    RESTORE_GCODE_STATE NAME=STATE_Z_TILT

[gcode_macro _CLEAN_NOZZLE]
gcode:
    {% set pad_x_start = 180 %}
    {% set pad_x_end = 350 %}
    {% set pad_y_mid = 245 %}
    {% set pad_wipe_z = 4.2 %}
    {% set temp = params.TEMP|default("200")|int %}

    _REQUIRE_HOMED

    SAVE_GCODE_STATE NAME=Pre_Clean_State
    G90 # absolute

    G1 X{pad_x_start} Y{pad_y_mid} Z10 F9000   # to start position
    {% if printer.extruder.target < temp %}
        M117 Nozzle heating...
        M109 S{temp}
    {% endif %}

    M117 Cleaning...
    M106 S255   # fan to 50%
    G1 Z{pad_wipe_z} F300      # drop down to wiping height
    G1 X{pad_x_end + 5} F4500  # move just past the end of the pad
    {% for wipes in range(5) %}
        G1 Y{pad_y_mid} X{pad_x_start}
        G1 Y{pad_y_mid} X{pad_x_end}
    {% endfor %}
    G1 Z{pad_wipe_z + 5.0}   # lift
    G1 Z{pad_wipe_z} # back down
    # Z pattern
    {% for wipes in range(5) %}
      {% for zig in range(10) %}
        G1 Y{pad_y_mid+2} X{zig*2 + pad_x_start + 5}
        G1 Y{pad_y_mid-1} X{zig*2 + pad_x_start}
      {% endfor %}
    {% endfor %}
    G1 Z10 F300 # lift
    M117 Cleaning done.
    M400   # finish moves
    M107   # fan off
    RESTORE_GCODE_STATE NAME=Pre_Clean_State

[gcode_macro CLEAN_NOZZLE]
description: Clean the nozzle on the cleaning pad.
gcode:
    _REQUIRE_HOMED
    {% if not printer.z_tilt.applied %}
       Z_TILT_ADJUST
    {% endif %}
    _CLEAN_NOZZLE
    M104 S0 # Turn off hotend
    

# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro _REQUIRE_HOMED]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
      #STATUS_HOMING
      G28
      #SATUS_READY
    {% endif %}

[gcode_macro _CALIBRATION_ZOFFSET]
gcode:
    M117 Calibrate Offset
    QUAD_GANTRY_LEVEL
    M140 S65
    G4 P500
    CLEAN_NOZZLE
    G4 P500
    M117 Z-offset calibration
    Z_OFFSET_CALIBRATION
    Z_OFFSET_APPLY_PROBE
    SAVE_CONFIG 



[force_move]
# Enable commands that force potentially unsafe movement
enable_force_move: True

[gcode_macro UNSAFE_BED_DOWN]
description: Lower the bed 50mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z100 F6000
  M84

[output_pin RELAY_PIN]
#configure the relay signal pin SKRpro V1.2 EXT1 port
pin = PF4

[gcode_macro _TURNOFF_MAINS]
#change relays state to off
gcode:
  SET_PIN PIN=RELAY_PIN VALUE=1


[gcode_macro TURNOFF_AFTERPRINT]
#if the hotend temperature falls below 50, mains is switched off
gcode:
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=0 MAXIMUM=50
  _turnoff_mains  

[gcode_macro TURNOFF_EXHAUST]
#if the hotend temperature falls below 50, mains is switched off
gcode:
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=0 MAXIMUM=150
  SET_FAN_SPEED FAN=Abluft SPEED=0

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


[gcode_macro PURGE_NOZZLE]
gcode:
    {% set temp_extruder = printer['extruder'] %}
    
    # {% if temp_extruder.temperature < 225 %}
    # M109 S250
    # {% endif %}
    CG28
    G90
    G0 X240 Y250 Z4.0 F36000
    G91
    G1 E45.0 F300 
    #G1 E-0.5 F600
    G92 E0 
    M107
    G90
    G0 X160 F10000    

[gcode_macro PID_TUNE]
gcode:
	{% set e_tune = params.TEMP|default(0)|int %}
    {% if e_tune > 110 %}
    {% set output = ["PID_CALIBRATE HEATER="] %} 
    {% set dummy = output.append("extruder TARGET=%.2f" % e_tune) %}
    {% else %}
    {% set output = ["PID_CALIBRATE HEATER="] %} 
    {% set dummy = output.append("heater_bed TARGET=%.2f" % e_tune) %}
    {% endif %}
    {output|join("")}    